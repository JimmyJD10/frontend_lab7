{"ast":null,"code":"import React,{useContext}from'react';import{Route,Navigate}from'react-router-dom';// Usamos Navigate, no Redirect\nimport{AuthContext}from'../auth-context';import{jsx as _jsx}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{element:Component,roles,...rest}=_ref;const{auth}=useContext(AuthContext);// Se retorna la ruta directamente con el `element` adecuado\nreturn/*#__PURE__*/_jsx(Route,{...rest,element:// Verificamos si el usuario está autenticado\n!auth.user?/*#__PURE__*/_jsx(Navigate,{to:\"/login\"}):// Verificamos si el usuario tiene los roles necesarios\nroles&&!roles.some(role=>auth.roles.includes(role))?/*#__PURE__*/_jsx(Navigate,{to:\"/\"}):/*#__PURE__*/// Si pasa ambas verificaciones, renderizamos el componente\n_jsx(Component,{})});};export default ProtectedRoute;","map":{"version":3,"names":["React","useContext","Route","Navigate","AuthContext","jsx","_jsx","ProtectedRoute","_ref","element","Component","roles","rest","auth","user","to","some","role","includes"],"sources":["D:/JWT03/frontend-auth/src/components/ProtectedRoute.js"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { Route, Navigate } from 'react-router-dom';  // Usamos Navigate, no Redirect\r\nimport { AuthContext } from '../auth-context';\r\n\r\nconst ProtectedRoute = ({ element: Component, roles, ...rest }) => {\r\n  const { auth } = useContext(AuthContext);\r\n\r\n  // Se retorna la ruta directamente con el `element` adecuado\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      element={\r\n        // Verificamos si el usuario está autenticado\r\n        !auth.user ? (\r\n          <Navigate to=\"/login\" />\r\n        ) : (\r\n          // Verificamos si el usuario tiene los roles necesarios\r\n          roles && !roles.some((role) => auth.roles.includes(role)) ? (\r\n            <Navigate to=\"/\" />\r\n          ) : (\r\n            // Si pasa ambas verificaciones, renderizamos el componente\r\n            <Component />\r\n          )\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,UAAU,KAAQ,OAAO,CACzC,OAASC,KAAK,CAAEC,QAAQ,KAAQ,kBAAkB,CAAG;AACrD,OAASC,WAAW,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9C,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAA4C,IAA3C,CAAEC,OAAO,CAAEC,SAAS,CAAEC,KAAK,CAAE,GAAGC,IAAK,CAAC,CAAAJ,IAAA,CAC5D,KAAM,CAAEK,IAAK,CAAC,CAAGZ,UAAU,CAACG,WAAW,CAAC,CAExC;AACA,mBACEE,IAAA,CAACJ,KAAK,KACAU,IAAI,CACRH,OAAO,CACL;AACA,CAACI,IAAI,CAACC,IAAI,cACRR,IAAA,CAACH,QAAQ,EAACY,EAAE,CAAC,QAAQ,CAAE,CAAC,CAExB;AACAJ,KAAK,EAAI,CAACA,KAAK,CAACK,IAAI,CAAEC,IAAI,EAAKJ,IAAI,CAACF,KAAK,CAACO,QAAQ,CAACD,IAAI,CAAC,CAAC,cACvDX,IAAA,CAACH,QAAQ,EAACY,EAAE,CAAC,GAAG,CAAE,CAAC,cAEnB;AACAT,IAAA,CAACI,SAAS,GAAE,CAGjB,CACF,CAAC,CAEN,CAAC,CAED,cAAe,CAAAH,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}