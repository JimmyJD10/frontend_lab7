{"ast":null,"code":"import db from \"../models/index.js\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nconst User = db.user;\nconst Role = db.role;\nexport const signup = async (req, res) => {\n  try {\n    // Crear nuevo usuario\n    const user = await User.create({\n      username: req.body.username,\n      email: req.body.email,\n      password: bcrypt.hashSync(req.body.password, 8)\n    });\n\n    // Si vienen roles en el request\n    if (req.body.roles) {\n      const roles = await Role.findAll({\n        where: {\n          name: req.body.roles\n        }\n      });\n      await user.setRoles(roles); // asociación muchos a muchos\n    } else {\n      // Rol por defecto: user\n      const role = await Role.findOne({\n        where: {\n          name: \"user\"\n        }\n      });\n      await user.setRoles([role]);\n    }\n    res.send({\n      message: \"User registered successfully!\"\n    });\n  } catch (err) {\n    res.status(500).send({\n      message: err.message\n    });\n  }\n};\nexport const signin = async (req, res) => {\n  try {\n    const user = await User.findOne({\n      where: {\n        username: req.body.username\n      },\n      include: [{\n        model: Role,\n        as: \"roles\",\n        // Este alias debe estar en tu asociación\n        attributes: [\"name\"],\n        through: {\n          attributes: []\n        } // no queremos info extra de user_roles\n      }]\n    });\n    if (!user) {\n      return res.status(404).send({\n        message: \"User Not Found.\"\n      });\n    }\n    const passwordIsValid = bcrypt.compareSync(req.body.password, user.password);\n    if (!passwordIsValid) {\n      return res.status(401).send({\n        accessToken: null,\n        message: \"Invalid Password!\"\n      });\n    }\n\n    // Obtener nombres de roles\n    const authorities = user.roles.map(role => role.name);\n\n    // Generar token con id y roles\n    const token = jwt.sign({\n      id: user.id,\n      username: user.username,\n      roles: authorities // 👈 Aseguramos que el token tenga los roles\n    }, process.env.JWT_SECRET || \"jwt-secret-key\", {\n      expiresIn: 86400 // 24 horas\n    });\n    res.status(200).send({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      roles: authorities,\n      accessToken: token\n    });\n  } catch (err) {\n    res.status(500).send({\n      message: err.message\n    });\n  }\n};","map":{"version":3,"names":["db","jwt","bcrypt","User","user","Role","role","signup","req","res","create","username","body","email","password","hashSync","roles","findAll","where","name","setRoles","findOne","send","message","err","status","signin","include","model","as","attributes","through","passwordIsValid","compareSync","accessToken","authorities","map","token","sign","id","process","env","JWT_SECRET","expiresIn"],"sources":["D:/JWT03/frontend-auth/src/auth-context.js"],"sourcesContent":["import db from \"../models/index.js\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconst User = db.user;\r\nconst Role = db.role;\r\n\r\nexport const signup = async (req, res) => {\r\n  try {\r\n    // Crear nuevo usuario\r\n    const user = await User.create({\r\n      username: req.body.username,\r\n      email: req.body.email,\r\n      password: bcrypt.hashSync(req.body.password, 8),\r\n    });\r\n\r\n    // Si vienen roles en el request\r\n    if (req.body.roles) {\r\n      const roles = await Role.findAll({\r\n        where: {\r\n          name: req.body.roles,\r\n        },\r\n      });\r\n      await user.setRoles(roles); // asociación muchos a muchos\r\n    } else {\r\n      // Rol por defecto: user\r\n      const role = await Role.findOne({ where: { name: \"user\" } });\r\n      await user.setRoles([role]);\r\n    }\r\n\r\n    res.send({ message: \"User registered successfully!\" });\r\n\r\n  } catch (err) {\r\n    res.status(500).send({ message: err.message });\r\n  }\r\n};\r\n\r\nexport const signin = async (req, res) => {\r\n  try {\r\n    const user = await User.findOne({\r\n      where: {\r\n        username: req.body.username,\r\n      },\r\n      include: [\r\n        {\r\n          model: Role,\r\n          as: \"roles\", // Este alias debe estar en tu asociación\r\n          attributes: [\"name\"],\r\n          through: { attributes: [] }, // no queremos info extra de user_roles\r\n        },\r\n      ],\r\n    });\r\n\r\n    if (!user) {\r\n      return res.status(404).send({ message: \"User Not Found.\" });\r\n    }\r\n\r\n    const passwordIsValid = bcrypt.compareSync(\r\n      req.body.password,\r\n      user.password\r\n    );\r\n\r\n    if (!passwordIsValid) {\r\n      return res.status(401).send({\r\n        accessToken: null,\r\n        message: \"Invalid Password!\",\r\n      });\r\n    }\r\n\r\n    // Obtener nombres de roles\r\n    const authorities = user.roles.map((role) => role.name);\r\n\r\n    // Generar token con id y roles\r\n    const token = jwt.sign(\r\n      {\r\n        id: user.id,\r\n        username: user.username,\r\n        roles: authorities, // 👈 Aseguramos que el token tenga los roles\r\n      },\r\n      process.env.JWT_SECRET || \"jwt-secret-key\",\r\n      {\r\n        expiresIn: 86400, // 24 horas\r\n      }\r\n    );\r\n\r\n    res.status(200).send({\r\n      id: user.id,\r\n      username: user.username,\r\n      email: user.email,\r\n      roles: authorities,\r\n      accessToken: token,\r\n    });\r\n\r\n  } catch (err) {\r\n    res.status(500).send({ message: err.message });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}